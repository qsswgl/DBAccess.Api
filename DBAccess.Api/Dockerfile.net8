# 基于 .NET 8 的生产级 Docker 镜像
# 多阶段构建：最小化最终镜像大小

# ==== 构建阶段 ====
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# 设置环境变量优化构建
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1
ENV DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1
ENV DOTNET_NOLOGO=1

# 拷贝项目文件并还原依赖（利用 Docker 缓存层）
COPY ["DBAccess.Api.csproj", "."]
RUN dotnet restore "DBAccess.Api.csproj" --runtime linux-x64

# 拷贝源代码
COPY . .

# 发布应用程序（自包含、单文件、裁剪）
RUN dotnet publish "DBAccess.Api.csproj" \
    --configuration Release \
    --runtime linux-x64 \
    --self-contained true \
    --no-restore \
    --output /app/publish \
    /p:PublishSingleFile=true \
    /p:PublishTrimmed=true \
    /p:TrimMode=partial

# ==== 运行时阶段 ====
FROM mcr.microsoft.com/dotnet/runtime-deps:8.0-jammy AS runtime

# 创建非特权用户
RUN adduser --disabled-password --gecos '' --uid 1001 appuser

# 设置工作目录
WORKDIR /app

# 拷贝发布的应用程序
COPY --from=build --chown=appuser:appuser /app/publish .

# 创建必要的目录
RUN mkdir -p /app/certificates /app/logs && \
    chown -R appuser:appuser /app

# 切换到非特权用户
USER appuser

# 设置环境变量
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:8080;https://+:8443
ENV DOTNET_RUNNING_IN_CONTAINER=true
ENV DOTNET_EnableDiagnostics=0

# 暴露端口
EXPOSE 8080 8443

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/api/dbaccess/ping?db=master || exit 1

# 启动应用程序
ENTRYPOINT ["./DBAccess.Api"]